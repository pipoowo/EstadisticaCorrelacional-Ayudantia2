---
title: "Lenguaje y género en Reddit: Contrastes entre r/AskMen y r/AskWomen"
subtitle: "Métodos Computacionales para las Ciencias Sociales"
author: "Cristóbal Mejías G. & Felipe Vega G."
date: 2025-10-03
lang: es
date-format: "long"
format:
  revealjs:
    theme: simple
    slide-number: true
    transition: fade
    transition-speed: slow
css: styles.css
editor: visual
echo: true
---

## **Introducción**

Hoy en día, la mayoría de las interacciones sociales se dan de forma digital a través de diversas plataformas, lo que provoca que, tanto el género y el lenguaje se construyan de manera digital y globalizada.

![](https://1000logos.net/wp-content/uploads/2017/05/Reddit-Logo.png){fig-align="center" width="50mm"}

## **Relevancia**

1.  Redes sociales son un espacio principal de socialización y construcción de género hoy en día.

2.  Permite identificar discursos que producen y reproducen estereotipos o roles de género.

3.  Posibilita distinguir los diferente perfiles de usuarios en las discusiones ligadas al género.

![](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi7U4PMfI8CMPw59rBdZqy5w3-4JrOmxHRCsnztddm9xFV-7uB3sn_vIeZFACtBypAqnhqDEUx13ejjtmpBJJNJxz1OILM8FY6-lOPbbpI0q-0kTwc1l8hZHJbAXOQQsT43vyyISYqAfzc/s1600/sex-education-gender-stereotypes.jpg){fig-align="center" width="100mm"}

## **Pregunta de investigación**

*¿Qué diferencias discursivas existen en torno al género en los comentarios de los usuarios de los subreddit r/AskMen y r/AskWomen en Reddit?*

![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQEO3ODDfv275IRjOLaBzluhsdy-mQTLezdbA&s){fig-align="center" width="50mm"}

## **¿Qué se puede hacer con los datos?**

1.  Comparación y análisis de contenido a partir del género.
2.  Análisis cruzado, es decir, de qué se habla con respecto al género opuesto en cada subreddit
3.  Análisis de los diferentes perfiles de usuarios que interactúan en estos foros con respecto a su género e identidad.

![](https://cdn-icons-png.freepik.com/512/2709/2709686.png){fig-align="center" width="65mm"}

## **r/AskMen**

r/AskMen: creado el 30 de agosto de 2010, con \~2 millones de miembros y \~41 mil contribuciones semanales. Su lema principal es *un lugar para discutir sobre la experiencia masculina.*

![](images/Captura%20de%20pantalla%202025-10-02%20155402.png){fig-align="center" width="80mm"}

## **r/AskWomen**

r/AskWomen: creado el 17 de julio de 2010, cuenta con \~946 mil suscriptores y \~14 mil usuarios activos. Su propósito es ofrecer un espacio donde las mujeres puedan hablar sobre sus pensamientos, vidas y experiencias.

![](images/Captura%20de%20pantalla%202025-10-02%20155545.png){fig-align="center" width="80mm"}

## **PRAW**

Se utilizó la API de Reddit, mediante la librería PRAW. Esta herramienta permite automatizar la recolección de publicaciones y comentarios, asegurando un volumen considerable de datos y facilitando su análisis.

![](https://images.opencollective.com/praw-dev/e9c1693/logo/256.png){fig-align="center"}

## **Tutorial:** inscripción de la aplicación

Se inscribió una aplicación para poder hacer uso de la API de Reddit. En el siguiente [enlace](https://rymur.github.io/setup) podrán encontrar un tutorial de cómo crear una app.

![](images/Captura%20de%20pantalla%202025-10-01%20232702-2.png){fig-align="center" width="244mm"}

## **Tutorial:** autenticación con PRAW

Para utilizar la API se trabajará en Python y se usará Positron como entorno de trabajo. Como primer paso, dentro del entorno de trabajo, se requieren las siguientes librerías.

```{python}
import praw
from datetime import datetime
import pandas as pd # para manipulación de dataframes
from dotenv import load_dotenv # cargar variables de ambiente
import os # cargar variables de ambiente
```

## **Tutorial:** autenticación con PRAW

Se requiere crear un *text file .env* para escribir las credenciales y guardarlas en el ambiente. Si las variables dentro de este archivo están funcionando correctamente, *load_dotenv()* debería responder True.

```{python}
#| output: false
load_dotenv()
```

## **Tutorial:** autenticación con PRAW

Se crean variables que contengan los *tokens* del archivo *.env*.

```{python}
client_id = os.getenv('CLIENT_ID')
client_secret = os.getenv('CLIENT_SECRET')
username = os.getenv('USERNAME')
password = os.getenv('PASSWORD')
user_agent = os.getenv('USER_AGENT')
auth_url = "https://www.reddit.com/api/v1/access_token"
```

Mediante la función reddit de PRAW, se hará la siguiente autenticación:

```{python}
#| eval: false
#| #| output: false
reddit = praw.Reddit(
    client_id=client_id,
    client_secret=client_secret,
    user_agent=user_agent
)
```

## Tutorial: proceso de extracción de datos

La extracción de datos se hizo a partir de los subreddits de r/AskMen y r/AskWomen. Para asegurar una cantidad de datos robusta, la extracción se hizo un día por medio a partir del 25/09/2025.

## **Tutorial: proceso de extracción de datos de r/AskMen**

Se creó una variable que contenga el subreddit de donde se quiere extraer la información y una lista para contener los comentarios de cada publicación.

```{python}
#| eval: false
#| #| output: false
subreddit_askmen = reddit.subreddit("AskMen")
comentarios_askmen = []
```

## **Tutorial: proceso de extracción de datos de r/AskMen**

Se creó un *for anidado* para las publicaciones y los comentarios. De esta forma, se fueron recolectando cada comentario de cada publicación del día en el subreddit.

```{python}
#| eval: false
#| output: false
for submission in subreddit_askmen.top(time_filter="day", limit=1000):
    submission.comments.replace_more(limit=None)

    for comment in submission.comments:
        askmen = [
            subreddit_askmen,
            submission.author,
            submission.id,
            submission.title,
            submission.num_comments,
            submission.over_18,                
            submission.score,              
            comment.author,
            comment.id,
            comment.body,
            comment.score,
            datetime.fromtimestamp(comment.created_utc)                    
        ]
        comentarios_askmen.append(askmen)
```

## **Tutorial: proceso de extracción de datos de r/AskMen**

Se creó un dataframe que contiene las variables extraídas y se les asignó nombres. A la base de dato se le colocó “nombresubreddit_fecha” para poder organizarlas por día. Para efectos de este tutorial, los nombres de las BBDD serán fecha xxxx.

```{python}
#| eval: false
askmen_xxxx = pd.DataFrame(
    comentarios_askmen,
    columns=["subreddit_nombre", "submission_autor", "submission_id", "submission_titulo",
     "submission_numcom", "submission_NSFW", "submission_puntaje",
     "comentario_autor", "comentario_id", "comentario_body", "comentario_puntaje", "comentario_fecha"]
)

askmen_xxxx.to_csv("askmen_xxxx.csv", index=False)
```

## Tutorial: proceso de extracción de datos de r/AskWomen

A continuación, se repite el mismo procedimiento, pero cambiando al subreddit a r/AskWomen.

```{python}
#| eval: false
#| #| output: false
subreddit_askwomen = reddit.subreddit("AskWomen")
comentarios_askwomen = []

for submission in subreddit_askwomen.top(time_filter="day", limit=1000):
    submission.comments.replace_more(limit=None)

    for comment in submission.comments:
        askwomen = [
            subreddit_askwomen,
            submission.author,
            submission.id,
            submission.title,
            submission.num_comments,
            submission.over_18,                
            submission.score,              
            comment.author,
            comment.id,
            comment.body,
            comment.score,
            datetime.fromtimestamp(comment.created_utc)                    
        ]
        comentarios_askwomen.append(askwomen)

askwomen_xxxx = pd.DataFrame(
    comentarios_askwomen,
    columns=["subreddit_nombre", "submission_autor", "submission_id", "submission_titulo",
     "submission_numcom", "submission_NSFW", "submission_puntaje",
     "comentario_autor", "comentario_id", "comentario_body", "comentario_puntaje", "comentario_fecha"]
)

askwomen_xxxx.to_csv("askwomen_xxxx.csv", index=False)
```

## Tutorial: unión de BBDD para procesamiento

Desde este paso, se comienza a trabajar con **R**. Para esto, se requiere instalar las siguientes liberías, más la opción de eliminar notifiación científica y limpiar el entorno de trabajo.

```{r}
#| output: false
library(dplyr)     # Manipular datos 
library(readr)     # Leer datos 
library(tidyr)     # Tratamiento datos
library(ggplot2)   # Gráficos
library(stringr)   # Trabajar con texto
library(gt)        # Tablas
options(scipen = 999)
rm(list = ls())
```

## Tutorial: unión de BBDD para procesamiento

Se cargan las BBDD guardadas con formato *.csv* y se unen todas en una base de datos llamada "datos_ask". En el caso de tener más extracciones, se deben ir agregando siguiendo el mismo procedimiento.

```{r}
#| eval: false
askmen_xxxx <- read_csv("askmen_xxxx.csv")
askwomen_xxxx <- read_csv("askwomen_xxxx.csv")

datos_ask <- bind_rows(askmen_xxxx, askwomen_xxxx)

write_csv(datos_ask, "datos_ask.csv")
```

## Tutorial: procesamiento de BBDD

Se creó una nueva base de datos procesada (datos_ask_proc) a la cual se le realizaron recodificaciones y filtros.

```{r}
#| eval: false
datos_ask_proc <- datos_ask %>%
  mutate(submission_NSFW = case_when(
    submission_NSFW == "FALSE" ~ 0,
    submission_NSFW == "TRUE" ~ 1)) %>%
  separate(comentario_fecha, into = c("comentario_fecha", "comentario_hora"), sep = " ") %>%
group_by(comentario_fecha)%>%
  filter(n() > 100) %>%
  ungroup()%>%
group_by(submission_id) %>%
  filter(n() > 1)

as.Date(datos_ask_proc$comentario_fecha)

write_csv(datos_ask_proc, "datos_ask_proc.csv")
```

## Variables

```{r}
#| echo: false

variables_info <- tibble::tribble(
  ~Variable, ~Definición,
  "subreddit_nombre", "Nombre del subreddit de donde proviene la publicación (AskMen o AskWomen).",
  "submission_autor", "Usuario que creó la publicación original.",
  "submission_id", "Identificador único de la publicación en Reddit.",
  "submission_titulo", "Título de la publicación realizada en el subreddit.",
  "submission_numcom", "Número total de comentarios que recibió la publicación.",
  "submission_NSFW", "Indica si la publicación fue marcada como NSFW (Not Safe For Work)  (0=no, 1=sí).",
  "submission_puntaje", "Puntaje total de la publicación (upvotes – downvotes).",
  "comentario_autor", "Usuario que escribió el comentario.",
  "comentario_id", "Identificador único de cada comentario en Reddit.",
  "comentario_body", "Texto completo del comentario.",
  "comentario_puntaje", "Puntaje del comentario (upvotes – downvotes).",
  "comentario_fecha", "Fecha en que se realizó el comentario (formato día-mes-año).",
  "comentario_hora", "Hora en que se realizó el comentario."
)

variables_info %>%
  gt() %>%
  tab_header(
    title = md("**Variables incluidas en el análisis**"),
    subtitle = "Definición de cada variable del dataset procesado"
  ) %>%
  cols_label(
    Variable = "Variable",
    Definición = "Definición"
  ) %>%
  tab_options(
    table.font.size = px(14),
    row.striping.include_table_body = TRUE,
    table.width = pct(80),
    table.align = "center"
  )
```

## Análisis descriptivo: actividad por día

```{r}
#| echo: false
# Tabla: cantidad de comentarios por día y subreddit
datos_ask_proc <- read_csv("datos_ask_proc.csv")
tabla_comentarios_por_dia <- datos_ask_proc %>%
  group_by(comentario_fecha, subreddit_nombre) %>%
  summarise(
    comentarios = n_distinct(comentario_id), 
    .groups = "drop"
  ) %>%
  arrange(comentario_fecha)
total_comentarios <- tibble(
  comentario_fecha = as.Date(NA),   
  subreddit_nombre = "Total",
  comentarios = sum(tabla_comentarios_por_dia$comentarios, na.rm = TRUE)
)
tabla_con_total <- bind_rows(tabla_comentarios_por_dia, total_comentarios)


tabla1 <- tabla_con_total %>%
  gt() %>%
  tab_header(
    title = "Tabla 1: Comentarios por día",
    subtitle = "Cantidad de comentarios únicos en r/AskMen y r/AskWomen"
  ) %>%
  cols_label(
    comentario_fecha = "Fecha",
    subreddit_nombre = "Subreddit",
    comentarios = "Comentarios"
  ) %>%
  fmt_number(
    columns = comentarios,
    decimals = 0,
    use_seps = TRUE
  ) %>%
  tab_options(
    table.width = pct(100),
    table.align = "center"
  )



  tabla1
```

## Análisis descriptivo: actividad por día

```{r}
#| echo: false
datos_ask_subreddit <- datos_ask_proc %>%
  group_by(comentario_fecha, subreddit_nombre) %>%
  summarise(
    submission_cantidad = n(),
    submission_puntaje = mean(submission_puntaje),
    submission_NSFW = sum(submission_NSFW)
  ) %>%
  ungroup() %>%
  mutate(comentario_fecha = as.Date(comentario_fecha)) %>%
  arrange(comentario_fecha, subreddit_nombre)

#--- Actividad de comentarios por día en cada subreddit----
graf1 <- ggplot(datos_ask_subreddit, aes (x=comentario_fecha, y=submission_cantidad, color = subreddit_nombre)) +
  geom_line(size = 1) +  
  geom_point(size = 3) +  
  scale_y_continuous(limits = c(0,2500), breaks = seq(0,2500, by = 250)) +
  labs(
    title = "Gráfico 1: Actividad de comentarios por día",
    subtitle = "Comparación entre r/AskMen y r/AskWomen",
    x = "Fecha",
    y = "Cantidad de comentarios",
    color = "Subreddit"
  ) +
  theme_minimal() +
  scale_color_manual(values = c("AskMen" = "#1f77b4",  
                               "AskWomen" = "#d62728"))

graf1
```

## Análisis descriptivo: comentarios por subreddit

```{r}
#| echo: false
# Tabla: estadísticos descriptivo de comentarios por subreddit
descriptivos_comentarios <- tabla_comentarios_por_dia %>%
  group_by(subreddit_nombre) %>%
  summarise(
    media = mean(comentarios, na.rm = TRUE),
    minimo = min(comentarios, na.rm = TRUE),
    maximo = max(comentarios, na.rm = TRUE),
    .groups = "drop"
  )

tabla2 <- descriptivos_comentarios %>%
  gt() %>%
  tab_header(
    title = "Tabla 2: Estadísticos descriptivos",
    subtitle = "Descriptivos de comentarios diarios por subreddit"
  ) %>%
  cols_label(
    subreddit_nombre = "Subreddit",
    media   = "Media",
    minimo  = "Mínimo",
    maximo  = "Máximo"
  ) %>%
  fmt_number(
    columns = c(media, minimo, maximo),
    decimals = 0,
    use_seps = TRUE
  ) %>%
  tab_options(
    table.width = pct(100),  
    table.align = "center"    
  )

tabla2
```

## Análisis descriptivo: puntajes en publicaciones por subreddits

```{r}
#| echo: false
datos_ask_titulo <- datos_ask_proc %>%
  group_by(submission_id) %>%
  summarise (subreddit_nombre = first(subreddit_nombre),
             submission_autor = first(submission_autor),
             submission_id = first(submission_id),
             submission_titulo = first(submission_titulo),
             submission_numcom = first(submission_numcom),
             submission_puntaje = first(submission_puntaje),
             submission_NSFW = first(submission_NSFW),
             comentario_fecha = first(comentario_fecha),
             .groups = "drop"    
  )

graf2 <- ggplot(datos_ask_titulo, aes(x = subreddit_nombre, y = submission_puntaje, fill = subreddit_nombre)) +
  geom_violin(trim = FALSE, alpha = 0.6) +
  geom_boxplot(width = 0.1, fill = "white") +
  scale_y_log10() +
  labs(
    title = "Gráfico 2: Distribución del puntaje de publicaciones",
    subtitle = "Comparación puntaje (upvotes y downvotes) entre r/AskMen y r/AskWomen",
    x = "Subreddit",
    y = "Puntaje (ln)"
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("AskMen" = "#1f77b4",  
                               "AskWomen" = "#d62728"))

graf2
```

## Análisis descriptivo: contenido NSFW

```{r}
#| echo: false
nsfw_total <- datos_ask_subreddit %>%
  group_by(subreddit_nombre) %>%
  summarise(
    total_nsfw = sum(submission_NSFW, na.rm = TRUE),
    .groups = "drop"
  )

graf3 <- ggplot(nsfw_total, aes(x = subreddit_nombre, y = total_nsfw, fill = subreddit_nombre)) +
  geom_col(alpha = 0.8, width = 0.6) +
  geom_text(aes(label = total_nsfw),
            vjust = -0.5,        
            fontface = "bold") + 
  labs(
    title = "Gráfico 3: Cantidad de comentarios en publicaciones NSFW",
    subtitle = "Comparación entre r/AskMen y r/AskWomen",
    x = "Subreddit",
    y = "Número de comentarios en publicaciones NSFW"
  ) +
  scale_fill_manual(values = c("AskMen" = "#1f77b4",  
                               "AskWomen" = "#d62728")) +
  theme_minimal()
graf3 
```

## Directrices de investigación

Para la investigación a futuro, se busca realizar un análisis específico de contenido con respecto al género. Por ejemplo, de insultos, contenido sexual, emociones, entre otros.

```{r}
#| echo: false
#| fig-align: "center"

#Crear lista de insultos y análisis

insultos_AskMen <- datos_ask_proc %>%
  filter(subreddit_nombre == "AskMen")

insultos_AskWomen <- datos_ask_proc %>%
  filter(subreddit_nombre == "AskWomen")

# Lista de insultos hacia hombres
palabras_insultos_hombre <- paste(c(
  "\\bfag(s|got)?\\b", "\\bgay\\b", "\\bpussy\\b", "\\bsimp\\b", 
  "\\bbeta\\b", "\\bcuck\\b", "\\bloser\\b", "\\bsoyboy\\b", 
  "\\bincel\\b", "\\bdickhead\\b", "\\basshole\\b", "\\bprick\\b", 
  "\\bwimps?\\b", "\\bweaklings?\\b", "\\bbitch\\b"
), collapse = "|")

# Lista de insultos hacia mujeres
palabras_insultos_mujer <- paste(c(
  "\\bsluts?\\b", "\\bwhores?\\b", "\\bhoes?\\b", "\\bskanks?\\b", "\\bthots?\\b", 
  "\\bbitch(es)?\\b", "\\bcunts?\\b", "\\bhags?\\b", "\\bgold ?diggers?\\b", "\\bhookers?\\b", 
  "\\bslappers?\\b", "\\bwenches?\\b", "\\btramps?\\b", "\\bcows?\\b", "\\bnags?\\b"
), collapse = "|")

# Insultos hacia hombres en cada subreddit
insultos_hombre_AskMen <- sum(
  str_count(insultos_AskMen$comentario_body, regex(palabras_insultos_hombre, ignore_case = TRUE))
)

insultos_hombre_AskWomen <- sum(
  str_count(insultos_AskWomen$comentario_body, regex(palabras_insultos_hombre, ignore_case = TRUE))
)

# Insultos hacia mujeres en cada subreddit
insultos_mujer_AskMen <- sum(
  str_count(insultos_AskMen$comentario_body, regex(palabras_insultos_mujer, ignore_case = TRUE))
)

insultos_mujer_AskWomen <- sum(
  str_count(insultos_AskWomen$comentario_body, regex(palabras_insultos_mujer, ignore_case = TRUE))
)

# Data frame con los resultados
datos_insultos <- data.frame(
  subreddit_nombre = c("AskMen", "AskWomen", "AskMen", "AskWomen"),
  tipo_insultos = c("Masculinos", "Masculinos", "Femeninos", "Femeninos"),
  cantidad = c(insultos_hombre_AskMen, insultos_hombre_AskWomen,
               insultos_mujer_AskMen, insultos_mujer_AskWomen)
)

datos_insultos <- datos_insultos %>%
  group_by(subreddit_nombre) %>%
  mutate(porcentaje = round(100 * cantidad / sum(cantidad), 1)) %>%
  ungroup()

graf4 <- ggplot(datos_insultos, aes(x = tipo_insultos, y = cantidad, fill = subreddit_nombre)) +
  geom_col(position = position_dodge(), color = "black") +
  geom_text(aes(label = paste0(cantidad, " (", porcentaje, "%)")),
            position = position_dodge(width = 0.9), vjust = -0.3, size = 3) +
  labs(
    title = "Gráfico 4: Cantidad de insultos por género y subreddit",
    subtitle = "Se muestran cantidades absolutas y porcentaje relativo",
    x = "Tipo de insultos",
    y = "Cantidad",
    fill = "Subreddit"
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("AskMen" = "#1f77b4", "AskWomen" = "#d62728"))

graf4
```

# **Gracias por su atención !**

## **Referencias bibliográficas** {.small-text}

Criado, N., Ferrer, X., Such, J. & Van Nuenen, T. (2021). Discovering and Categorising Language Biases in Reddit. *Proceedings of the International AAAI Conference on Web and Social Media, 15*(1), 140-151. <https://doi.org/10.1609/icwsm.v15i1.18048> 

Sawicki, J. & Solska, D. (2024). Decoding gender bias through a textual exploration of Reddit /r/MensRights community. Beyond Philology, 1(21), 167-202. <https://doi.org/10.26881/bp.2024.1.06>

Scholz, S., Stang, P., Weiss, M. & Winkler, C. (2025). Changing Conversations: The Rise of Gender and Sexuality Discourse on Reddit. *Arch Sex Behav, 54*, 1–5. <https://doi.org/10.1007/s10508-024-03051-9>
